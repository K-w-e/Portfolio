{"version":3,"file":"index.esm.js","sources":["../src/context/Provider.tsx","../src/ModalRoot.tsx"],"sourcesContent":["import React from 'react';\n\n// Interfaces\nimport { ProviderState, ShowModalParams } from '../interfaces';\n\nexport const ModalContext = React.createContext<ProviderState>({\n  component: null,\n  showModal: () => {},\n  hideModal: () => {},\n  isOpen: false,\n  modalProps: {},\n});\n\nclass ModalProvider extends React.Component<{}, ProviderState> {\n  /**\n   * By passing the component as parameter to the state of the context store, we can trigger a\n   * re-render and show in the modalRoot component that is a consumer of this store.\n   *\n   * With this approach, we can render multiple components in one place, one at the time, with only\n   * one function to manage the visibility of the modal, having multiple modals in one page.\n   */\n  showModal = ({ component, modalProps = {} }: ShowModalParams) => {\n    this.setState({\n      component,\n      modalProps,\n      isOpen: true,\n    });\n  };\n\n  /**\n   * To be able to animate the modal enter/leave state, the component can't be null because react\n   * would render null on the leave state.\n   *\n   * Instead of setting the component state to null to hide the modal component, we change the\n   * isOpen prop so the modal implementation handle and animate the leave state, if the user wants.\n   */\n  hideModal = () => {\n    this.setState({ isOpen: false });\n  };\n\n  state = {\n    component: null,\n    modalProps: {},\n    showModal: this.showModal,\n    hideModal: this.hideModal,\n    isOpen: false,\n  };\n\n  render() {\n    return <ModalContext.Provider value={this.state}>{this.props.children}</ModalContext.Provider>;\n  }\n}\n\nexport default ModalProvider;\n","import React from 'react';\nimport { ModalContext } from './context/Provider';\n\n/**\n * This will be the component that will render every modal component that the user wants to show\n * with the necessary props.\n *\n * Instead of declaring all of the modal components to be rendered, this single component will\n * render what the user sets in the context and provide the necessary props from the user.\n */\nconst ModalRoot: React.FC<{}> = () => {\n  const { component: Component, isOpen, hideModal, modalProps } = React.useContext(ModalContext);\n  return Component && <Component {...modalProps} isOpen={isOpen} hideModal={hideModal} />;\n};\n\nexport default ModalRoot;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKa,YAAY,GAAG,KAAK,CAAC,aAAa,CAAgB;IAC7D,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,eAAQ;IACnB,SAAS,EAAE,eAAQ;IACnB,MAAM,EAAE,KAAK;IACb,UAAU,EAAE,EAAE;CACf,EAAE;AAEH;IAA4B,iCAAkC;IAA9D;QAAA,qEAsCC;;;;;;;;QA9BC,eAAS,GAAG,UAAC,EAA+C;gBAA7C,wBAAS,EAAE,kBAAe,EAAf,oCAAe;YACvC,KAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,WAAA;gBACT,UAAU,YAAA;gBACV,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;SACJ,CAAC;;;;;;;;QASF,eAAS,GAAG;YACV,KAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;SAClC,CAAC;QAEF,WAAK,GAAG;YACN,SAAS,EAAE,IAAI;YACf,UAAU,EAAE,EAAE;YACd,SAAS,EAAE,KAAI,CAAC,SAAS;YACzB,SAAS,EAAE,KAAI,CAAC,SAAS;YACzB,MAAM,EAAE,KAAK;SACd,CAAC;;KAKH;IAHC,8BAAM,GAAN;QACE,OAAO,oBAAC,YAAY,CAAC,QAAQ,IAAC,KAAK,EAAE,IAAI,CAAC,KAAK,IAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAyB,CAAC;KAChG;IACH,oBAAC;AAAD,CAAC,CAtC2B,KAAK,CAAC,SAAS;;ACV3C;;;;;;;AAOA,IAAM,SAAS,GAAiB;IACxB,IAAA,mCAAwF,EAAtF,wBAAoB,EAAE,kBAAM,EAAE,wBAAS,EAAE,0BAA6C,CAAC;IAC/F,OAAO,SAAS,IAAI,oBAAC,SAAS,eAAK,UAAU,IAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,IAAI,CAAC;AAC1F,CAAC;;;;"}