import React from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var ModalContext = React.createContext({
    component: null,
    showModal: function () { },
    hideModal: function () { },
    isOpen: false,
    modalProps: {},
});
var ModalProvider = /** @class */ (function (_super) {
    __extends(ModalProvider, _super);
    function ModalProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * By passing the component as parameter to the state of the context store, we can trigger a
         * re-render and show in the modalRoot component that is a consumer of this store.
         *
         * With this approach, we can render multiple components in one place, one at the time, with only
         * one function to manage the visibility of the modal, having multiple modals in one page.
         */
        _this.showModal = function (_a) {
            var component = _a.component, _b = _a.modalProps, modalProps = _b === void 0 ? {} : _b;
            _this.setState({
                component: component,
                modalProps: modalProps,
                isOpen: true,
            });
        };
        /**
         * To be able to animate the modal enter/leave state, the component can't be null because react
         * would render null on the leave state.
         *
         * Instead of setting the component state to null to hide the modal component, we change the
         * isOpen prop so the modal implementation handle and animate the leave state, if the user wants.
         */
        _this.hideModal = function () {
            _this.setState({ isOpen: false });
        };
        _this.state = {
            component: null,
            modalProps: {},
            showModal: _this.showModal,
            hideModal: _this.hideModal,
            isOpen: false,
        };
        return _this;
    }
    ModalProvider.prototype.render = function () {
        return React.createElement(ModalContext.Provider, { value: this.state }, this.props.children);
    };
    return ModalProvider;
}(React.Component));

/**
 * This will be the component that will render every modal component that the user wants to show
 * with the necessary props.
 *
 * Instead of declaring all of the modal components to be rendered, this single component will
 * render what the user sets in the context and provide the necessary props from the user.
 */
var ModalRoot = function () {
    var _a = React.useContext(ModalContext), Component = _a.component, isOpen = _a.isOpen, hideModal = _a.hideModal, modalProps = _a.modalProps;
    return Component && React.createElement(Component, __assign({}, modalProps, { isOpen: isOpen, hideModal: hideModal }));
};

export { ModalContext, ModalProvider, ModalRoot };
//# sourceMappingURL=index.esm.js.map
